digraph {
    subgraph cluster_4 {
        graph [label="[\"wcet/lcdnum.c:19\"]@num_to_lcd"];
        -4611686018427387895 [label="FinalUse(%1)"
                             ,color=green];
        -4611686018427387894 [label="FinalUse(%2)"
                             ,color=green];
        4 [label="ENTER @num_to_lcd"
          ,color=yellow];
        5 [label="(formal-in)%a"
          ,color=yellow];
        8 [label="[]: %1 = alloca i8 , align 1"
          ,shape=box];
        9 [label="[]: %2 = alloca i8 , align 1"
          ,shape=box];
        10 [label="[]: store i8 %a , i8* %2 , align 1"
           ,shape=box];
        11 [label="[28]: %3 = zext i8 %a to i32"
           ,shape=box];
        57 [label="[28]: switch i32 %3 , label %20 [ [1 x <2 x i32>] zeroinitializer, label %4 [1 x <2 x i32>] [<2 x i32> [i32 1, i32 1]], label %5 [1 x <2 x i32>] [<2 x i32> [i32 2, i32 2]], label %6 [1 x <2 x i32>] [<2 x i32> [i32 3, i32 3]], label %7 [1 x <2 x i32>] [<2 x i32> [i32 4, i32 4]], label %8 [1 x <2 x i32>] [<2 x i32> [i32 5, i32 5]], label %9 [1 x <2 x i32>] [<2 x i32> [i32 6, i32 6]], label %10 [1 x <2 x i32>] [<2 x i32> [i32 7, i32 7]], label %11 [1 x <2 x i32>] [<2 x i32> [i32 8, i32 8]], label %12 [1 x <2 x i32>] [<2 x i32> [i32 9, i32 9]], label %13 [1 x <2 x i32>] [<2 x i32> [i32 10, i32 10]], label %14 [1 x <2 x i32>] [<2 x i32> [i32 11, i32 11]], label %15 [1 x <2 x i32>] [<2 x i32> [i32 12, i32 12]], label %16 [1 x <2 x i32>] [<2 x i32> [i32 13, i32 13]], label %17 [1 x <2 x i32>] [<2 x i32> [i32 14, i32 14]], label %18 [1 x <2 x i32>] [<2 x i32> [i32 15, i32 15]], label %19 ]"
           ,shape=box];
        59 [label="[30]: store i8 0 , i8* %1"
           ,shape=box];
        60 [label="[30]: br label %21"
           ,shape=box];
        63 [label="[31]: store i8 36 , i8* %1"
           ,shape=box];
        64 [label="[31]: br label %21"
           ,shape=box];
        67 [label="[32]: store i8 93 , i8* %1"
           ,shape=box];
        68 [label="[32]: br label %21"
           ,shape=box];
        71 [label="[33]: store i8 109 , i8* %1"
           ,shape=box];
        72 [label="[33]: br label %21"
           ,shape=box];
        75 [label="[34]: store i8 46 , i8* %1"
           ,shape=box];
        76 [label="[34]: br label %21"
           ,shape=box];
        78 [label="[35]: store i8 93 , i8* %1"
           ,shape=box];
        79 [label="[35]: br label %21"
           ,shape=box];
        82 [label="[36]: store i8 123 , i8* %1"
           ,shape=box];
        83 [label="[36]: br label %21"
           ,shape=box];
        86 [label="[37]: store i8 37 , i8* %1"
           ,shape=box];
        87 [label="[37]: br label %21"
           ,shape=box];
        90 [label="[38]: store i8 127 , i8* %1"
           ,shape=box];
        91 [label="[38]: br label %21"
           ,shape=box];
        94 [label="[39]: store i8 111 , i8* %1"
           ,shape=box];
        95 [label="[39]: br label %21"
           ,shape=box];
        98 [label="[40]: store i8 63 , i8* %1"
           ,shape=box];
        99 [label="[40]: br label %21"
           ,shape=box];
        102 [label="[41]: store i8 122 , i8* %1"
            ,shape=box];
        103 [label="[41]: br label %21"
            ,shape=box];
        106 [label="[42]: store i8 83 , i8* %1"
            ,shape=box];
        107 [label="[42]: br label %21"
            ,shape=box];
        110 [label="[43]: store i8 124 , i8* %1"
            ,shape=box];
        111 [label="[43]: br label %21"
            ,shape=box];
        114 [label="[44]: store i8 91 , i8* %1"
            ,shape=box];
        115 [label="[44]: br label %21"
            ,shape=box];
        118 [label="[45]: store i8 27 , i8* %1"
            ,shape=box];
        119 [label="[45]: br label %21"
            ,shape=box];
        121 [label="[47]: store i8 0 , i8* %1"
            ,shape=box];
        122 [label="[47]: br label %21"
            ,shape=box];
        124 [label="[]: %22 = phi i8 [ [0, %20], [27, %19], [91, %18], [124, %17], [83, %16], [122, %15], [63, %14], [111, %13], [127, %12], [37, %11], [123, %10], [93, %9], [46, %8], [109, %7], [93, %6], [36, %5], [0, %4] ]"
            ,shape=box];
        125 [label="[47]: ret i8 %22"
            ,shape=box];
        2305843009213693947 [label="(global-in)@num_to_lcd:@OUT"
                            ,color=yellow];
        4611686018427387899 [label="(global-in)@num_to_lcd:@IN"
                            ,color=yellow];
    }
    subgraph cluster_126 {
        graph [label="[\"wcet/lcdnum.c:53\"]@main"];
        -4611686018427387775 [label="FinalUse(%1)"
                             ,color=green];
        -4611686018427387774 [label="FinalUse(%i)"
                             ,color=green];
        -4611686018427387773 [label="FinalUse(%a)"
                             ,color=green];
        -4611686018427387772 [label="FinalUse(%n)"
                             ,color=green];
        -2305843009213693825 [label="(global-out)@main:@OUT"
                             ,color=yellow];
        126 [label="ENTER @main"
            ,color=yellow];
        128 [label="[]: %1 = alloca i32 , align 4"
            ,shape=box];
        129 [label="[]: %i = alloca i32 , align 4"
            ,shape=box];
        130 [label="[]: %a = alloca i8 , align 1"
            ,shape=box];
        131 [label="[]: %n = alloca i32 , align 4"
            ,shape=box];
        133 [label="[]: store i32 0 , i32* %1"
            ,shape=box];
        134 [label="[59]: store i32 10 , i32* %n , align 4"
            ,shape=box];
        135 [label="[60]: store i32 0 , i32* %i , align 4"
            ,shape=box];
        136 [label="[60]: br label %2"
            ,shape=box];
        138 [label="[]: %3 = phi i32 [ [%.pre, %15], [10, %0] ]"
            ,shape=box];
        139 [label="[]: %4 = phi i32 [ [%17, %15], [0, %0] ]"
            ,shape=box];
        140 [label="[60]: %5 = icmp slt i32 %4 , %3"
            ,shape=box];
        141 [label="[60]: br i1 %5 , label %6 , label %18"
            ,shape=box];
        143 [label="[62]: %7 = volatile load i8* @IN , align 1"
            ,shape=box];
        144 [label="[62]: store i8 %7 , i8* %a , align 1"
            ,shape=box];
        145 [label="[63]: %8 = load i32* %i , align 4"
            ,shape=box];
        146 [label="[63]: %9 = icmp slt i32 %8 , 5"
            ,shape=box];
        147 [label="[63]: br i1 %9 , label %10 , label %15"
            ,shape=box];
        149 [label="[65]: %11 = zext i8 %7 to i32"
            ,shape=box];
        150 [label="[65]: %12 = and i32 %11 , 15"
            ,shape=box];
        151 [label="[65]: %13 = trunc i32 %12 to i8"
            ,shape=box];
        152 [label="[65]: store i8 %13 , i8* %a , align 1"
            ,shape=box];
        153 [label="[66]: %14 = call i8 @num_to_lcd ( i8 %13 )"
            ,shape=box];
        154 [label="[66]: volatile store i8 %14 , i8* @OUT , align 1"
            ,shape=box];
        155 [label="[60]: %.pre1 = load i32* %i , align 4"
            ,shape=box];
        156 [label="[67]: br label %15"
            ,shape=box];
        158 [label="[]: %16 = phi i32 [ [%.pre1, %10], [%8, %6] ]"
            ,shape=box];
        159 [label="[60]: %17 = add nsw i32 %16 , 1"
            ,shape=box];
        160 [label="[60]: store i32 %17 , i32* %i , align 4"
            ,shape=box];
        161 [label="[60]: %.pre = load i32* %n , align 4"
            ,shape=box];
        162 [label="[60]: br label %2"
            ,shape=box];
        164 [label="[69]: ret i32 0"
            ,shape=box];
        658812288346769547 [label="(actual-in)%14:@OUT"
                           ,color=yellow];
        768614336404564497 [label="(actual-in)%14:@IN"
                           ,color=yellow];
        2305843009213693825 [label="(global-in)@main:@OUT"
                            ,color=yellow];
        4611686018427387777 [label="(global-in)@main:@IN"
                            ,color=yellow];
        9223372036854775654 [label="(actual-in)%14:%13"
                            ,color=yellow];
    }
    4 -> -4611686018427387895 [color=black];
    4 -> -4611686018427387894 [color=black];
    4 -> 5 [color=black];
    4 -> 8 [color=black];
    4 -> 9 [color=black];
    4 -> 10 [color=black];
    4 -> 11 [color=black];
    4 -> 57 [color=black];
    4 -> 124 [color=black];
    4 -> 125 [color=black];
    4 -> 2305843009213693947 [color=black];
    4 -> 4611686018427387899 [color=black];
    5 -> 10 [color=sandybrown];
    5 -> 11 [color=sandybrown];
    10 -> -4611686018427387894 [color=sandybrown];
    11 -> 57 [color=sandybrown];
    57 -> 59 [color=black];
    57 -> 60 [color=black];
    57 -> 63 [color=black];
    57 -> 64 [color=black];
    57 -> 67 [color=black];
    57 -> 68 [color=black];
    57 -> 71 [color=black];
    57 -> 72 [color=black];
    57 -> 75 [color=black];
    57 -> 76 [color=black];
    57 -> 78 [color=black];
    57 -> 79 [color=black];
    57 -> 82 [color=black];
    57 -> 83 [color=black];
    57 -> 86 [color=black];
    57 -> 87 [color=black];
    57 -> 90 [color=black];
    57 -> 91 [color=black];
    57 -> 94 [color=black];
    57 -> 95 [color=black];
    57 -> 98 [color=black];
    57 -> 99 [color=black];
    57 -> 102 [color=black];
    57 -> 103 [color=black];
    57 -> 106 [color=black];
    57 -> 107 [color=black];
    57 -> 110 [color=black];
    57 -> 111 [color=black];
    57 -> 114 [color=black];
    57 -> 115 [color=black];
    57 -> 118 [color=black];
    57 -> 119 [color=black];
    57 -> 121 [color=black];
    57 -> 122 [color=black];
    59 -> -4611686018427387895 [color=sandybrown];
    63 -> -4611686018427387895 [color=sandybrown];
    67 -> -4611686018427387895 [color=sandybrown];
    71 -> -4611686018427387895 [color=sandybrown];
    75 -> -4611686018427387895 [color=sandybrown];
    78 -> -4611686018427387895 [color=sandybrown];
    82 -> -4611686018427387895 [color=sandybrown];
    86 -> -4611686018427387895 [color=sandybrown];
    90 -> -4611686018427387895 [color=sandybrown];
    94 -> -4611686018427387895 [color=sandybrown];
    98 -> -4611686018427387895 [color=sandybrown];
    102 -> -4611686018427387895 [color=sandybrown];
    106 -> -4611686018427387895 [color=sandybrown];
    110 -> -4611686018427387895 [color=sandybrown];
    114 -> -4611686018427387895 [color=sandybrown];
    118 -> -4611686018427387895 [color=sandybrown];
    121 -> -4611686018427387895 [color=sandybrown];
    124 -> 125 [color=sandybrown];
    124 -> 154 [color=sandybrown];
    126 -> -4611686018427387775 [color=black];
    126 -> -4611686018427387774 [color=black];
    126 -> -4611686018427387773 [color=black];
    126 -> -4611686018427387772 [color=black];
    126 -> -2305843009213693825 [color=black];
    126 -> 128 [color=black];
    126 -> 129 [color=black];
    126 -> 130 [color=black];
    126 -> 131 [color=black];
    126 -> 133 [color=black];
    126 -> 134 [color=black];
    126 -> 135 [color=black];
    126 -> 136 [color=black];
    126 -> 138 [color=black];
    126 -> 139 [color=black];
    126 -> 140 [color=black];
    126 -> 141 [color=black];
    126 -> 2305843009213693825 [color=black];
    126 -> 4611686018427387777 [color=black];
    133 -> -4611686018427387775 [color=sandybrown];
    134 -> -4611686018427387772 [color=sandybrown];
    134 -> 161 [color=sandybrown];
    135 -> -4611686018427387774 [color=sandybrown];
    135 -> 145 [color=sandybrown];
    135 -> 155 [color=sandybrown];
    138 -> 140 [color=sandybrown];
    139 -> 140 [color=sandybrown];
    140 -> 141 [color=sandybrown];
    141 -> 143 [color=black];
    141 -> 144 [color=black];
    141 -> 145 [color=black];
    141 -> 146 [color=black];
    141 -> 147 [color=black];
    141 -> 164 [color=black];
    143 -> 144 [color=sandybrown];
    143 -> 149 [color=sandybrown];
    144 -> -4611686018427387773 [color=sandybrown];
    145 -> 146 [color=sandybrown];
    145 -> 158 [color=sandybrown];
    146 -> 147 [color=sandybrown];
    147 -> 149 [color=black];
    147 -> 150 [color=black];
    147 -> 151 [color=black];
    147 -> 152 [color=black];
    147 -> 153 [color=black];
    147 -> 154 [color=black];
    147 -> 155 [color=black];
    147 -> 156 [color=black];
    147 -> 158 [color=black];
    147 -> 159 [color=black];
    147 -> 160 [color=black];
    147 -> 161 [color=black];
    147 -> 162 [color=black];
    149 -> 150 [color=sandybrown];
    150 -> 151 [color=sandybrown];
    151 -> 152 [color=sandybrown];
    151 -> 9223372036854775654 [color=sandybrown];
    152 -> -4611686018427387773 [color=sandybrown];
    153 -> 4 [color=deepskyblue];
    153 -> 154 [color=sandybrown];
    153 -> 658812288346769547 [color=black];
    153 -> 768614336404564497 [color=black];
    153 -> 9223372036854775654 [color=black];
    154 -> -2305843009213693825 [color=sandybrown];
    154 -> 658812288346769547 [color=sandybrown];
    155 -> 158 [color=sandybrown];
    158 -> 159 [color=sandybrown];
    159 -> 139 [color=sandybrown];
    159 -> 160 [color=sandybrown];
    160 -> -4611686018427387774 [color=sandybrown];
    160 -> 145 [color=sandybrown];
    160 -> 155 [color=sandybrown];
    161 -> 138 [color=sandybrown];
    658812288346769547 -> 2305843009213693947 [style=dashed
                                              ,color=forestgreen];
    768614336404564497 -> 4611686018427387899 [style=dashed
                                              ,color=forestgreen];
    2305843009213693825 -> -2305843009213693825 [color=sandybrown];
    2305843009213693825 -> 658812288346769547 [color=sandybrown];
    4611686018427387777 -> 143 [color=sandybrown];
    4611686018427387777 -> 768614336404564497 [color=sandybrown];
    9223372036854775654 -> 5 [style=dashed
                             ,color=forestgreen];
}